#!/bin/csh -f

#
# Program: ftp.ebi.ac.uk_arrayexpress
#
# Original Author: kstone
#
# Purpose:
#
#	Download ArrayExpress IDs
#

cd `dirname $0` && source ./Configuration 

# Full URLs for ArrayExpress file
setenv URL_AEXP 'ftp://ftp.ebi.ac.uk/pub/databases/arrayexpress/data/atlas/bioentity_properties/ensembl/mus_musculus.ensgene.tsv'

# Full path to download directories
setenv DOWNLOADS_AEXP	${DATADOWNLOADS}/ftp.ebi.ac.uk/pub/databases/arrayexpress/data/atlas/bioentity_properties/ensembl

# Full path the read/write lock directory
setenv LOCK_DIR	${DOWNLOADS_AEXP}

# full path to log files
setenv LOGFILE_AEXP	${MIRRORLOG}/ftp.ebi.ac.uk.arrayexpress.log

mkdir -p $DOWNLOADS_AEXP
mkdir -p $MIRRORLOG

#
# wget
# -S = print the headers sent by HTTP servers and responses sent by FTP servers.
# -o = full path to log file
# -O = full path to output file
# -t = number of retries
# -r = reverse
# -k 7 = sort by the 7th column
# -nd = don't create directories
# -m = Turn on options suitable for mirroring. This option turns on recursion 
#    and time-stamping, sets infinite recursion depth and keeps FTP 
#    directory listings. It is currently equivalent to .-r -N -l 
#    inf --no-remove-listing.. 

# run mirror_lock to place lock file
# this command will return non-zero if  read or write lock is found
# attempt to set lock in the parent directory of ArrayExpress - 
# we don't want one to be mirrored without the other

# attempt to set AEXP write lock
mirror_lock wlock mirror_wget ${LOCK_DIR} > ${LOGFILE_AEXP}
if ($status != 0) then
  echo mirror_lock returned nonzero status...exiting ftp.ebi.ac.uk arrayexpress
  echo "See logs at ${LOGFILE_AEXP}"
  echo "Stop Time: `date`"
  exit (1)
endif

# run AEXP mirror
cd ${DOWNLOADS_AEXP}
wget -a ${LOGFILE_AEXP} -S -t 10 -nd -m "${URL_AEXP}"

echo ${MIRROR_WGET}

cd ${MIRROR_WGET}
mirror_lock unlock mirror_wget ${LOCK_DIR} >> ${LOGFILE_AEXP}
